import json

# Avenger class to represent individual superhero
class Avenger:
    def __init__(self, name, team, rating):
        self.name = name
        self.team = team
        self.rating = rating

    def __repr__(self):
        return f"{self.name} (Rating: {self.rating})"


# Avengers class to manage a collection of Avengers
class Avengers:
    def __init__(self):
        self.avengers_list = []

    def load_from_json(self, file_path):
        with open(file_path, "r") as file:
            avengers_data = json.load(file)
            self.avengers_list = [Avenger(item["name"], item["team"], item["rating"]) for item in avengers_data]

    def get_subset(self, threshold=80):
        """Create a subset of items with a rating greater than the given threshold."""
        return [avenger for avenger in self.avengers_list if avenger.rating > threshold]

    def get_highest_rating(self, subset):
        """Return the highest rating from the subset."""
        return max(subset, key=lambda x: x.rating) if subset else None

    def get_lowest_rating(self, subset):
        """Return the lowest rating from the subset."""
        return min(subset, key=lambda x: x.rating) if subset else None

    def get_average_rating(self, subset):
        """Return the average rating from the subset."""
        if not subset:
            return 0
        return sum(avenger.rating for avenger in subset) / len(subset)

    def sort_by_rating(self, subset):
        """Return the subset sorted by rating in descending order."""
        return sorted(subset, key=lambda x: x.rating, reverse=True)


# Example usage
if __name__ == "__main__":
    file_path = "/Users/jamildababneh/Desktop/Personal /Python/avengers.json"  # Replace with the actual path to your JSON file

    avengers = Avengers()
    avengers.load_from_json(file_path)

    # Create a subset with ratings greater than 80
    subset = avengers.get_subset(threshold=80)

    # Print lowest and highest ratings
    lowest = avengers.get_lowest_rating(subset)
    highest = avengers.get_highest_rating(subset)
    print(f"Lowest rating: {lowest.name} - {lowest.rating}")
    print(f"Highest rating: {highest.name} - {highest.rating}")

    # Print average rating
    average_rating = avengers.get_average_rating(subset)
    print(f"Average rating: {average_rating:.2f}")

    # Print the subset sorted by rating
    sorted_subset = avengers.sort_by_rating(subset)
    print("\nSorted Avengers by Rating:")
    for avenger in sorted_subset:
        print(avenger)
